name: release

on:
  workflow_call:
    inputs:
      lib:
        required: true
        type: string
    secrets:
      RELEASES_SSH_HOST:
        required: true
      RELEASES_SSH_PORT:
        required: true
      RELEASES_SSH_USER:
        required: true
      RELEASES_SSH_PRIVATE_KEY:
        required: true
      NPM_PUBLISH_TOKEN:
        required: true

jobs:
  test:
    name: Test ${{ inputs.lib }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: setup node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: install dependencies
        run: pnpm install

      - name: test ${{ inputs.lib }}
        run: pnpm exec nx test ${{ inputs.lib }} --codeCoverage --coverageReporters=cobertura

      - name: setup coverage report
        uses: ./.github/actions/setup-coverage-report
        with:
          path: coverage/libs/${{ inputs.lib }}/cobertura-coverage.xml

  build:
    name: Build ${{ inputs.lib }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: setup node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: install dependencies
        run: pnpm install

      - name: build ${{ inputs.lib }}
        run: pnpm exec nx build ${{ inputs.lib }}

      - uses: actions/upload-artifact@master
        name: create ${{ inputs.lib }} artifact
        with:
          name: ${{ inputs.lib }}
          path: ./dist/libs/${{ inputs.lib }}
          retention-days: 1

  deploy-zip:
    name: Deploy ${{ inputs.lib }} zip to release server
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: actions/download-artifact@master
        with:
          name: ${{ inputs.lib }}
          path: ./dist

      - name: dist lookup
        run: |
          cd dist
          ls -la
          cd -

      - name: print version
        run: |
          version=$(node -p "require('./dist/package.json').version")
          echo $version

      - name: zip ${{ inputs.lib }}.zip
        shell: bash
        run: zip -r "${{ inputs.lib }}.zip" ./dist >> /dev/null

      - name: copy ${{ inputs.lib }}-latest.zip to release server
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./${{ inputs.lib }}.zip
          remote: /var/www/datepoll-share/common/${{ inputs.lib }}/${{ inputs.lib }}-latest.zip
          host: ${{ secrets.RELEASES_SSH_HOST }}
          port: ${{ secrets.RELEASES_SSH_PORT }}
          username: ${{ secrets.RELEASES_SSH_USER }}
          privateKey: ${{ secrets.RELEASES_SSH_PRIVATE_KEY }}

      - name: copy ${{ inputs.lib }}-VERSION.zip to release server
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./${{ inputs.lib }}.zip
          remote: "/var/www/datepoll-share/common/${{ inputs.lib }}/${{ inputs.lib }}-v${version}.zip"
          host: ${{ secrets.RELEASES_SSH_HOST }}
          port: ${{ secrets.RELEASES_SSH_PORT }}
          username: ${{ secrets.RELEASES_SSH_USER }}
          privateKey: ${{ secrets.RELEASES_SSH_PRIVATE_KEY }}

  deploy-npm:
    name: Deploy ${{ inputs.lib }} to npm registry
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: setup node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - uses: actions/download-artifact@master
        with:
          name: ${{ inputs.lib }}
          path: ./dist

      - name: dist lookup
        shell: bash
        run: |
          cd dist
          ls -la
          cd -

      - name: publish to npm registry
        run: |
          cd dist/
          npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_PUBLISH_TOKEN }}
          npm publish