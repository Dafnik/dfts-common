---
import "../styles/global.css";

const projects = [
  {
    title: 'dfx-bootstrap-icons',
    text: 'Angular Bootstrap Icons',
    href: 'bootstrap-icons'
  },
  {
    title: 'dfx-bootstrap-table',
    text: 'Angular table CDK implementation for Bootstrap with filtering, sorting and pagination.',
    href: 'bootstrap-table'
  },
  {
    title: 'dfx-qrcode',
    text: 'Tiny and simple-to-use Angular QR-Code generator library.',
    href: 'qrcode'
  },
];

---
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="generator" content={Astro.generator} />
  <meta name="author" content="Dafnik" />
  <title>playground.dafnik.me</title>
</head>
<body>
<main class="container my-24 mx-auto px-4 md:px-2">
  <section class="hero">
    <h1>playground</h1>
  </section>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 card-grid">
    {
      projects.map((p) =>
        <div class="col">
          <a class="hover-card" href={p.href}>
            <div class="card-body">
              <h3 class="card-title">{p.title}</h3>
              <p class="card-text">{p.text}</p>
            </div>
          </a>
        </div>
      )
    }
  </div>
</main>

<footer>
  <p>
    by
    <a href="https://dafnik.me" target="_blank" rel="noopener">Dafnik</a>
  </p>
</footer>

</body>
</html>

<style>
  html,
  body {
    font-family: 'Poppins', sans-serif;
    background: #12121e;
    background-image:
      radial-gradient(
        circle at top left,
        rgba(255, 255, 255, 0.05) 0%,
        transparent 60%
      ),
      radial-gradient(
        circle at bottom right,
        rgba(255, 255, 255, 0.05) 0%,
        transparent 60%
      );
    color: #ddd;
    text-align: center !important;
    margin: 0;
    width: 100%;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  /* HERO */
  .hero {
    text-align: center;
    margin: 4rem 0;
  }

  .hero h1 {
    font-weight: 700;
    background: var(--gradient-primary);
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    font-size: 3rem;
  }

  @media (min-width: 768px) {
    .hero h1 {
      font-size: 5rem;
    }
  }

  /* CARD GRID */
  .card-grid {
    flex: 1;
  }

  .hover-card {
    background: #1f1f2b;
    border: none;
    border-radius: 1rem;
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease,
      background 0.3s ease;
    overflow: hidden;
    color: inherit;
    text-decoration: none;
    display: block;
    height: 100%;
    flex-direction: column;
  }

  .hover-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.5);
    background: #26263a;
  }

  .hover-card .card-body {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 2rem;
  }

  .hover-card .card-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    background-size: 200% 100%;
    background-position: 0 0;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    transition: background-position 0.5s ease;
  }

  .grid > .col:nth-child(1) .card-title {
    background-image: var(--gradient-primary);
  }

  .grid > .col:nth-child(2) .card-title {
    background-image: var(--gradient-secondary);
  }

  .grid > .col:nth-child(3) .card-title {
    background-image: var(--gradient-tertiary);
  }

  .hover-card:hover .card-title {
    background-position: 100% 0;
  }

  .hover-card .card-text {
    color: #bbb;
    margin-top: auto;
    font-size: 0.95rem;
  }

  .hover-card.active {
    transform: translateY(-8px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.5);
    background: #26263a;
  }
  .hover-card.active .card-title {
    background-position: 100% 0;
  }

  /* FOOTER */
  footer {
    text-align: center;
    padding: 2rem 0;
    color: #666;
  }

  footer a {
    color: #ccc;
    text-decoration: none;
    font-weight: 500;
  }

  footer a:hover {
    text-decoration: underline;
  }
</style>

<script>
      const cards = Array.from(
        document.querySelectorAll<HTMLAnchorElement>('.hover-card')
      );
      let idx = 0;
      let intervalId = startLoop();

      function startLoop() {
        return setInterval(() => {
          cards.forEach((c) => c.classList.remove('active'));
          cards[idx].classList.add('active');
          idx = (idx + 1) % cards.length;
        }, 2000) as unknown as number;
      }

      cards.forEach((card) => {
        card.addEventListener('mouseenter', () => {
          // stop the auto‐hover loop
          clearInterval(intervalId);
          intervalId = 0;
          // optionally clear any active state
          cards.forEach((c) => c.classList.remove('active'));
        });
        card.addEventListener('mouseleave', () => {
          // resume only if it’s not already running
          if (!intervalId) {
            intervalId = startLoop();
          }
        });
      });
    </script>

