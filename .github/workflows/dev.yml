name: on branch push

on:
  push:
    branches:
      - '*' # matches every branch that doesn't contain a '/'
      - '*/*' # matches every branch containing a single '/'
      - '**' # matches every branch

jobs:
  test:
    name: Test ${{ matrix.lib }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        lib: [dfts-helper, dfx-helper, dfx-translate]
    steps:
      - uses: actions/checkout@master

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v1
        with:
          install-ignore-scripts: true

      - name: test ${{ matrix.lib }}
        run: pnpm exec nx test ${{ matrix.lib }} --codeCoverage --coverageReporters=cobertura

      - name: setup coverage report
        uses: ./.github/actions/setup-coverage-report
        with:
          path: coverage/libs/${{ matrix.lib }}/cobertura-coverage.xml

  build-lib:
    name: Build ${{ matrix.lib }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lib: [dfts-helper, dfx-helper, dfx-translate, dfx-bootstrap-table]
    steps:
      - uses: actions/checkout@master

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v1
        with:
          install-ignore-scripts: true

      - name: build ${{ matrix.lib }}
        run: pnpm exec nx build ${{ matrix.lib }}

      - uses: actions/upload-artifact@master
        name: create ${{ matrix.lib }} artifact
        with:
          name: ${{ matrix.lib }}
          path: ./dist/libs/${{ matrix.lib }}
          retention-days: 1

  build-app:
    name: Build ${{ matrix.app }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ dfx-bootstrap-table-demo ]
    steps:
      - uses: actions/checkout@master

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v1
        with:
          install-ignore-scripts: true

      - name: build ${{ matrix.app }}
        run: pnpm exec nx build ${{ matrix.app }}

      - uses: actions/upload-artifact@master
        name: create ${{ matrix.app }} artifact
        with:
          name: ${{ matrix.app }}
          path: ./dist/apps/${{ matrix.app }}
          retention-days: 1

  deploy-bootstrap-table-demo:
    name: Deploy dfx-bootstrap-table-demo
    needs: [build-app]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@master

      - uses: actions/download-artifact@master
        with:
          name: dfx-bootstrap-table-demo
          path: ./dist

      - name: dist lookup
        run: cd dist && ls -la && cd -

      - name: zip dfx-bootstrap-table-demo.zip
        run: zip -r "dfx-bootstrap-table-demo.zip" ./dist >> /dev/null

      - name: copy build files to demo server
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./dist
          remote: /var/www/dfx-bootstrap-table-demo
          rmRemote: true
          host: ${{ secrets.DEMO_SSH_HOST }}
          port: ${{ secrets.DEMO_SSH_PORT }}
          username: ${{ secrets.DEMO_SSH_USER }}
          privateKey: ${{ secrets.DEMO_SSH_PRIVATE_KEY }}

      - name: copy build to release server
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./dfx-bootstrap-table-demo.zip
          remote: /var/www/share/releases/dfx-bootstrap-table/dfx-bootstrap-table-demo.zip
          host: ${{ secrets.RELEASES_SSH_HOST }}
          port: ${{ secrets.RELEASES_SSH_PORT }}
          username: ${{ secrets.RELEASES_SSH_USER }}
          privateKey: ${{ secrets.RELEASES_SSH_PRIVATE_KEY }}

  deploy-dev:
    name: Deploy ${{ matrix.lib }} dev
    needs: [build-lib, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        lib: [dfts-helper, dfx-helper, dfx-translate, dfx-bootstrap-table]
    steps:
      - uses: actions/checkout@master

      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.lib }}
          path: ./dist

      - name: dist lookup
        run: cd dist && ls -la && cd -

      - name: zip ${{ matrix.lib }}.zip
        run: zip -r "${{ matrix.lib }}.zip" ./dist >> /dev/null

      - name: copy build to release server
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./${{ matrix.lib }}.zip
          remote: upload/${{ matrix.lib }}/${{ matrix.lib }}-dev.zip
          host: ${{ secrets.RELEASES_SSH_HOST }}
          port: ${{ secrets.RELEASES_SSH_PORT }}
          username: ${{ secrets.RELEASES_SSH_USER }}
          privateKey: ${{ secrets.RELEASES_SSH_PRIVATE_KEY }}
