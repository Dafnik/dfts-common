import {Component} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {ComponentFixture, TestBed} from '@angular/core/testing';
import {DfxTranslateModule} from '../dfx-translate.module';
import {TranslateService} from '../service/translate.service';
import {serviceStub} from '../test-helper';
import {lastValueFrom} from 'rxjs';
import {withAutoTranslatedLanguages, withRememberLanguage} from '../translate.provider';

@Component({
  template: '<div>{{ translateKey | tr }}</div>',
})
class TestTranslateDirectiveComponent {
  translateKey?: string;
}

describe('TranslateDirective', () => {
  let component: TestTranslateDirectiveComponent;
  let fixture: ComponentFixture<TestTranslateDirectiveComponent>;
  let nativeElement: HTMLElement;
  let translateService: TranslateService;

  beforeEach(() => {
    localStorage.clear();

    void TestBed.configureTestingModule({
      declarations: [TestTranslateDirectiveComponent],
      imports: [DfxTranslateModule.setup2(withRememberLanguage(false))],
      providers: [{provide: HttpClient, useValue: serviceStub}],
    }).compileComponents();

    translateService = TestBed.inject(TranslateService);

    fixture = TestBed.createComponent(TestTranslateDirectiveComponent) as typeof fixture;
    component = fixture.componentInstance;
    nativeElement = fixture.nativeElement as HTMLElement;

    fixture.detectChanges();
  });

  it('should use configured values', () => {
    expect(translateService.defaultLanguage).toBe('en');
    expect(translateService.getSelectedLanguage()).toBe('en');
    expect(translateService.autoTranslatedLanguages.length).toBe(0);
    expect(translateService.rememberLanguage).toBeFalsy();
    expect(localStorage.getItem('language')).toBeNull();
  });

  it('should create an instance', () => {
    expect(component).toBeTruthy();
  });

  it('should return undefined', () => {
    expect(nativeElement.querySelector('div')?.textContent).toBe('undefined');
  });

  it('should return key', () => {
    component.translateKey = 'key';
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('key');
  });

  it('should return value', () => {
    component.translateKey = 'testkey1';
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer1');
  });

  it('should return other value', () => {
    component.translateKey = 'testkey2';
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer2');
  });

  it('should return value after selecting other language', async () => {
    component.translateKey = 'testkey1';
    await lastValueFrom(translateService.use('de'));
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer1_DE');
  });

  it('should return other value after selecting other language', async () => {
    component.translateKey = 'testkey2';
    await lastValueFrom(translateService.use('de'));
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer2_DE');
  });
});

describe('TranslateDirectiveWithAuto', () => {
  let component: TestTranslateDirectiveComponent;
  let fixture: ComponentFixture<TestTranslateDirectiveComponent>;
  let nativeElement: HTMLElement;
  let translateService: TranslateService;

  beforeEach(() => {
    localStorage.clear();

    void TestBed.configureTestingModule({
      declarations: [TestTranslateDirectiveComponent],
      imports: [DfxTranslateModule.setup2(withRememberLanguage(false), withAutoTranslatedLanguages(['de']))],
      providers: [{provide: HttpClient, useValue: serviceStub}],
    }).compileComponents();

    translateService = TestBed.inject(TranslateService);

    fixture = TestBed.createComponent(TestTranslateDirectiveComponent);
    component = fixture.componentInstance;
    nativeElement = fixture.nativeElement as HTMLElement;

    fixture.detectChanges();
  });

  it('should use configured values', () => {
    expect(translateService.defaultLanguage).toBe('en');
    expect(translateService.getSelectedLanguage()).toBe('en');
    expect(translateService.autoTranslatedLanguages.length).toBe(1);
    expect(translateService.rememberLanguage).toBeFalsy();
    expect(localStorage.getItem('language')).toBeNull();
  });

  it('should autotranslated language be defined', async () => {
    expect(translateService.autoGeneratedTranslations).toEqual({});
    await lastValueFrom(translateService.use('de'));
    expect(translateService.autoGeneratedTranslations).not.toEqual({});
  });

  it('should return undefined with auto generated', () => {
    expect(nativeElement.querySelector('div')?.textContent).toBe('undefined');
  });

  it('should return key with auto generated', () => {
    component.translateKey = 'key';
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('key');
  });

  it('should return value', () => {
    component.translateKey = 'testkey1';
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer1');
  });

  it('should return other value', () => {
    component.translateKey = 'testkey2';
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer2');
  });

  it('should return autogenerated value', () => {
    component.translateKey = 'testkey4';
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer4');
  });

  it('should return value after selecting other language', async () => {
    component.translateKey = 'testkey1';
    await lastValueFrom(translateService.use('de'));
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer1_DE');
  });

  it('should return autogenerated value after selecting other language', async () => {
    component.translateKey = 'testkey4';
    await lastValueFrom(translateService.use('de'));
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer4_DE_auto');
  });

  it('should return other value after selecting other language', async () => {
    component.translateKey = 'testkey2';
    await lastValueFrom(translateService.use('de'));
    fixture.detectChanges();
    expect(nativeElement.querySelector('div')?.textContent).toBe('testanswer2_DE');
  });
});
