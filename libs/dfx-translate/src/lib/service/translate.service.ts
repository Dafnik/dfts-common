import {inject, Injectable} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {combineLatest, map, Observable, of, Subject, tap} from 'rxjs';

import {translationKeys} from '../translationKeys';
import {autoTranslationResponse, translationFile} from '../types';
import {
  TRANSLATE_ASSETS_PATH,
  TRANSLATE_AUTO_TRANSLATED_LANGUAGES,
  TRANSLATE_DEFAULT_LANGUAGE,
  TRANSLATE_LIBRE_TRANSLATE_INSTANCE_URL,
  TRANSLATE_REMEMBER_LANGUAGE,
} from '../config/translate.config';

@Injectable({
  providedIn: 'root',
})
export class TranslateService {
  translations: translationFile = {};
  autoGeneratedTranslations: translationFile = {};

  protected selectedLanguage = '';
  public selectedLanguageChange = new Subject<string>();

  defaultLanguage = inject(TRANSLATE_DEFAULT_LANGUAGE);
  rememberLanguage = inject(TRANSLATE_REMEMBER_LANGUAGE);
  autoTranslatedLanguages = inject(TRANSLATE_AUTO_TRANSLATED_LANGUAGES);
  assetsPath = inject(TRANSLATE_ASSETS_PATH);
  libreTranslateInstanceUrl = inject(TRANSLATE_LIBRE_TRANSLATE_INSTANCE_URL);

  httpClient = inject(HttpClient);

  getSelectedLanguage(): string {
    if (this.selectedLanguage.length < 1) {
      const language = this.rememberLanguage ? localStorage.getItem('language') : undefined;
      if (language) {
        console.log(`dfx-translate: Store >> Language found! Using "${language}"`);
        this.selectedLanguage = language;
      } else {
        console.log(`dfx-translate: Store >> No language found! Using "${this.defaultLanguage}" as default`);
        this.selectedLanguage = this.defaultLanguage;
      }
    }
    return this.selectedLanguage;
  }

  translate(key: translationKeys, printUndefined = true): string {
    if (!key) {
      return printUndefined ? 'undefined' : '';
    }

    const translation = this.translations[key] || this.autoGeneratedTranslations[key];
    return translation || key;
  }

  autoTranslate(key: translationKeys): Observable<string> {
    if (!key || key.length < 1) {
      return of('');
    }

    if (this.libreTranslateInstanceUrl) {
      const body = JSON.stringify({
        format: 'text',
        q: key,
        target: this.selectedLanguage,
        source: this.defaultLanguage,
      });

      return this.httpClient
        .put<autoTranslationResponse>(`${this.libreTranslateInstanceUrl}/translate`, body)
        .pipe(map((it) => it.translatedText));
    }
    return of('Feature disabled');
  }

  use(pickedLanguage?: string): Observable<[translationFile, translationFile]> {
    let lang = '';
    if (pickedLanguage) {
      lang = pickedLanguage;
      this.selectedLanguage = lang;
      this.selectedLanguageChange.next(this.selectedLanguage);
      console.log(`dfx-translate >> Language changed to "${lang}"`);
      if (this.rememberLanguage) {
        localStorage.setItem('language', lang);
      }
    } else {
      lang = this.getSelectedLanguage();
    }

    return combineLatest([
      this.httpClient.get<translationFile>(`${this.assetsPath}${this.selectedLanguage}.json`).pipe(
        tap({
          next: (translation) => {
            this.translations = translation;
          },
          error: () => {
            this.translations = {};
          },
        })
      ),
      this.autoTranslatedLanguages.includes(lang)
        ? this.httpClient.get<translationFile>(`${this.assetsPath}${this.selectedLanguage}_auto.json`).pipe(
            tap({
              next: (translation) => {
                this.autoGeneratedTranslations = translation;
              },
              error: () => {
                this.autoGeneratedTranslations = {};
              },
            })
          )
        : of({}),
    ]);
  }
}
