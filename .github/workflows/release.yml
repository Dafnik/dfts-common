name: release

on:
  workflow_call:
    inputs:
      lib:
        required: true
        type: string
    secrets:
      NPM_PUBLISH_TOKEN:
        required: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v4
        with:
          install: true

      - name: test ${{ inputs.lib }}
        run: pnpm exec nx test ${{ inputs.lib }} --configuration=ci --coverageReporters=cobertura

      - name: setup coverage report
        uses: ./.github/actions/setup-coverage-report
        with:
          path: coverage/libs/${{ inputs.lib }}/cobertura-coverage.xml

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v4
        with:
          install: true

      - name: build ${{ inputs.lib }}
        run: pnpm exec nx build ${{ inputs.lib }}

      - name: zip ${{ inputs.lib }}
        run: |
          cd ./dist/libs/
          zip -r "${{ inputs.lib }}.zip" ./${{ inputs.lib }}
          cd -

      - uses: actions/upload-artifact@v4
        name: create ${{ inputs.lib }} artifact
        with:
          name: ${{ inputs.lib }}
          path: ./dist/libs/${{ inputs.lib }}.zip
          retention-days: 1

  release-github:
    name: Release zip to github releases
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup Node.js
        uses: actions/setup-node@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.lib }}
          path: ./dist

      - name: get ${{ inputs.lib }} version
        id: get-version
        shell: bash
        run: echo "VERSION=$(node -p "require('./libs/${{ inputs.lib }}/package.json').version")" >> $GITHUB_OUTPUT

      - name: set to versioned zip ${{ inputs.lib }}-v${{ steps.get-version.outputs.VERSION }}.zip
        shell: bash
        run: |
          mkdir releases
          cp "./dist/${{ inputs.lib }}.zip" "./releases/${{ inputs.lib }}-v${{ steps.get-version.outputs.VERSION }}.zip"

      - name: releases lookup
        run: |
          cd releases
          ls -la
          du -hs
          cd -

      - name: get only latest changelog
        run: |
          ./tools/scripts/extractLatestVersionChangelog.sh ./libs/${{ inputs.lib }}/CHANGELOG.md
          cat RELEASE_CHANGELOG.md

      - name: create ${{ inputs.lib }}-v${{ steps.get-version.outputs.VERSION }} release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ./RELEASE_CHANGELOG.md
          files: ./releases/${{ inputs.lib }}-v${{ steps.get-version.outputs.VERSION }}.zip

  release-npm:
    name: Release to npm registry
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.lib }}
          path: ./dist

      - name: unzip
        shell: bash
        run: |
          cd dist
          unzip ${{ inputs.lib }}.zip
          cd -

      - name: dist lookup
        shell: bash
        run: |
          cd dist/${{ inputs.lib }}
          ls -la
          du -hs
          cd -

      - name: publish to npm registry
        run: |
          cd dist/${{ inputs.lib }}/
          npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_PUBLISH_TOKEN }}
          npm publish
