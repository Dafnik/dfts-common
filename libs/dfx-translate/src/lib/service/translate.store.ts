import {inject, Injectable, PLATFORM_ID, signal} from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { catchError, distinctUntilChanged, Observable, of, shareReplay, switchMap } from 'rxjs';
import { TRANSLATE_LOCALSTORAGE_KEY, translationFile } from '../types';
import { TRANSLATE_DEFAULT_LANGUAGE, TRANSLATE_ASSETS_PATH, TRANSLATE_REMEMBER_LANGUAGE, TRANSLATE_AUTO_TRANSLATED_LANGUAGES } from '../features';
import {toObservable} from '@angular/core/rxjs-interop';

@Injectable({
  providedIn: 'root',
})
export class TranslateStore {
  #httpClient = inject(HttpClient);
  #isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
  #rememberLanguage = inject(TRANSLATE_REMEMBER_LANGUAGE);
  #defaultLanguage = inject(TRANSLATE_DEFAULT_LANGUAGE);
  #assetsPath = inject(TRANSLATE_ASSETS_PATH);
  #autoTranslatedLanguages = inject(TRANSLATE_AUTO_TRANSLATED_LANGUAGES);

  readonly selectedLanguage = signal(
    this.#isBrowser
      ? this.#rememberLanguage
        ? localStorage.getItem(TRANSLATE_LOCALSTORAGE_KEY) ?? this.#defaultLanguage
        : this.#defaultLanguage
      : this.#defaultLanguage,
  );

  readonly selectedLanguage$ = toObservable(this.selectedLanguage).pipe(distinctUntilChanged())

  readonly translations$: Observable<translationFile> = this.selectedLanguage$.pipe(
    switchMap((language) => this.#httpClient.get<translationFile>(`${this.#assetsPath}${language}.json`).pipe(
      catchError(() => of({})),
    )),
    shareReplay(1),
  );
  readonly autoGeneratedTranslations$: Observable<translationFile> = this.selectedLanguage$.pipe(
    switchMap((language) =>
      this.#autoTranslatedLanguages.includes(language)
        ? this.#httpClient.get<translationFile>(`${this.#assetsPath}${language}_auto.json`).pipe(
          catchError(() => of({})),
        )
        : of({}),
    ),
    shareReplay(1),
  );
}
