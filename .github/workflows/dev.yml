name: on branch push

on:
  pull_request:
  push:
    branches:
      - main
      - develop

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: dafnik/setup-node-pnpm@v4
        with:
          install-ignore-scripts: true

      - name: Style check
        run: pnpm format:check

  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: dafnik/setup-node-pnpm@v4
        with:
          install-ignore-scripts: true

      - name: Lint project
        run: pnpm lint:check

  commitlint:
    name: Commitlint Check
    runs-on: ubuntu-latest
    steps:
      # Needed to get the commitlint config
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run commitlint
        uses: dafnik/commitlint@v1

  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    outputs:
      # Expose matched filters as job 'packages' output variable
      libs: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v5

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            dfts-helper:
              - 'libs/dfts-helper/**'
              - '{package,nx,migrations,tsconfig.base}.json'
              - 'pnpm-lock.yaml'
              - '.github/**'
            dfts-qrcode:
              - 'libs/dfts-qrcode/**'
              - '{package,nx,migrations,tsconfig.base}.json'
              - 'pnpm-lock.yaml'
              - '.github/**'
            dfx-bootstrap-table:
              - 'libs/dfx-bootstrap-table/**'
              - '{package,nx,migrations,tsconfig.base}.json'
              - 'pnpm-lock.yaml'
              - '.github/**'
            dfx-helper:
              - 'libs/dfx-helper/**'
              - '{package,nx,migrations,tsconfig.base}.json'
              - 'pnpm-lock.yaml'
              - '.github/**'
            dfx-qrcode:
              - 'libs/dfx-qrcode/**'
              - '{package,nx,migrations,tsconfig.base}.json'
              - 'pnpm-lock.yaml'
              - '.github/**'
            dfx-bootstrap-icons:
              - 'libs/dfx-bootstrap-icons/**'
              - '{package,nx,migrations,tsconfig.base}.json'
              - 'pnpm-lock.yaml'
              - '.github/**'
            dfx-openapi:
              - 'libs/dfx-openapi/**'
              - '{package,nx,migrations,tsconfig.base}.json'
              - 'pnpm-lock.yaml'
              - '.github/**'

  test:
    name: Test ${{ matrix.lib }}
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: changes
    if: ${{ needs.changes.outputs.libs != '[]' && needs.changes.outputs.libs != '' }}
    strategy:
      matrix:
        lib: ${{ fromJSON(needs.changes.outputs.libs) }}
    steps:
      - uses: actions/checkout@v5

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v4
        with:
          install-ignore-scripts: true

      - name: test ${{ matrix.lib }}
        run: pnpm exec nx test ${{ matrix.lib }} --configuration=ci --coverageReporters=cobertura

      - name: setup coverage report
        uses: ./.github/actions/setup-coverage-report
        with:
          path: coverage/libs/${{ matrix.lib }}/cobertura-coverage.xml

  build-lib:
    name: Build ${{ matrix.lib }}
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.libs != '[]' && needs.changes.outputs.libs != '' }}
    strategy:
      matrix:
        lib: ${{ fromJSON(needs.changes.outputs.libs) }}
    steps:
      - uses: actions/checkout@v5

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v4
        with:
          install-ignore-scripts: true

      - name: build ${{ matrix.lib }}
        run: pnpm exec nx build ${{ matrix.lib }}

      - name: zip ${{ matrix.lib }}
        run: |
          cd ./dist/libs/
          zip -r "${{ matrix.lib }}.zip" ./${{ matrix.lib }}
          cd -

      - uses: actions/upload-artifact@v4
        name: create ${{ matrix.lib }} artifact
        with:
          name: ${{ matrix.lib }}
          path: ./dist/libs/${{ matrix.lib }}.zip
          retention-days: 1

  build-playground:
    name: Build playground
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: setup node and pnpm
        uses: dafnik/setup-node-pnpm@v4
        with:
          install-ignore-scripts: true

      - name: build playground
        run: pnpm exec nx build playground2

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./apps/playground2/dist/
          retention-days: 1

  deploy-playground:
    if: github.ref == 'refs/heads/main'
    name: Deploy playground
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-playground
    permissions:
      actions: read
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
