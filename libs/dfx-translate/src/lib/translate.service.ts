import {Inject, Injectable} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {map, Observable, of, Subject} from 'rxjs';

import {TRANSLATE_CONFIG, TranslateConfig} from './translate.config';

import {translationKeys} from './translationKeys';
import {autoTranslationResponse, translationFile} from './types';

@Injectable({
  providedIn: 'root',
})
export class TranslateService {
  translations: translationFile = {};
  autoGeneratedTranslations: translationFile = {};

  protected selectedLanguage = '';
  public selectedLanguageChange = new Subject<string>();

  defaultLanguage = 'en';
  useLocalStorage = true;
  languagesWithAutoTranslation: string[] = [];
  assetsPath = 'assets/i18n/';
  libreTranslateInstanceUrl?: string;

  constructor(private httpClient: HttpClient, @Inject(TRANSLATE_CONFIG) config: TranslateConfig) {
    this.defaultLanguage = config.defaultLanguage ?? this.defaultLanguage;
    this.assetsPath = config.assetsPath ?? this.assetsPath;
    this.useLocalStorage = config.useLocalStorage ?? this.useLocalStorage;
    this.languagesWithAutoTranslation = config.languagesWithAutoTranslation ?? this.languagesWithAutoTranslation;
    this.libreTranslateInstanceUrl = config.libreTranslateInstanceUrl;
  }

  getSelectedLanguage(): string {
    if (this.selectedLanguage.length < 1) {
      const language = this.useLocalStorage ? localStorage.getItem('language') : undefined;
      if (language) {
        console.log(`Language cookie found! Using "${language}"`);
        this.selectedLanguage = language;
      } else {
        console.log(`No language cookie found! Using "${this.defaultLanguage}" as default`);
        this.selectedLanguage = this.defaultLanguage;
      }
    }
    return this.selectedLanguage;
  }

  translate(key: translationKeys, printUndefined = true): string {
    if (!key) {
      return printUndefined ? 'undefined' : '';
    }

    const translation = this.translations[key] || this.autoGeneratedTranslations[key];
    return translation || key;
  }

  autoTranslate(key: translationKeys): Observable<string> {
    if (!key || key.length < 1) {
      return of('');
    }

    if (this.libreTranslateInstanceUrl) {
      const body = JSON.stringify({
        format: 'text',
        q: key,
        target: this.selectedLanguage,
        source: this.defaultLanguage,
      });

      return this.httpClient
        .put<autoTranslationResponse>(`${this.libreTranslateInstanceUrl}/translate`, body)
        .pipe(map((it) => it.translatedText));
    }
    return of('Feature disabled');
  }

  use(pickedLanguage?: string): void {
    let lang = '';
    if (pickedLanguage) {
      lang = pickedLanguage;
      this.selectedLanguage = lang;
      this.selectedLanguageChange.next(this.selectedLanguage);
      console.log(`Language changed to "${lang}"`);
      if (this.useLocalStorage) {
        localStorage.setItem('language', lang);
      }
    } else {
      lang = this.getSelectedLanguage();
    }

    this.httpClient.get<translationFile>(`${this.assetsPath}${this.selectedLanguage}.json`).subscribe({
      next: (translation) => {
        this.translations = translation;
      },
      error: () => {
        this.translations = {};
      },
    });
    if (this.languagesWithAutoTranslation.includes(lang)) {
      this.httpClient.get<translationFile>(`${this.assetsPath}${this.selectedLanguage}_auto.json`).subscribe({
        next: (translation) => {
          this.autoGeneratedTranslations = translation;
        },
        error: () => {
          this.autoGeneratedTranslations = {};
        },
      });
    }
  }
}
